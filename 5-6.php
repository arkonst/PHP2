<?php

class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
$a1 = new A();

$a2 = new A();

$a1->foo(); // 1

$a2->foo(); // 2

$a1->foo(); // 3

$a2->foo(); // 4

 /**
  * Ключевое слово static, написанное перед присваиванием значения локальной переменной, приводит к следующим эффектам:
  * Присваивание выполняется только один раз, при первом вызове функции
  * Значение помеченной таким образом переменной сохраняется после окончания работы функции
  * При последующих вызовах функции вместо присваивания переменная получает сохраненное ранее значение 

  * Динамические методы в PHP существуют в единственном экземпляре. Даже если у нас будет сто объектов этого класса, 
  * метод будет существовать лишь в одном экземпляре, просто при каждом вызове в него будет пробрасываться разный $this.
  */

  
class B extends A {
}
$a1 = new A();

$b1 = new B();

$a1->foo(); // 1

$b1->foo(); // 1

$a1->foo(); // 2

$b1->foo(); // 2

/**
 * В свою очередь, наследование класса приводит к созданию нового метода. 
 */